// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package cablecoreddmbasedata.actions;

import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.IMendixIdentifier;
import cablecoreddmattribute.proxies.AttributeType;
import cablecoreddmattribute.proxies.AttributesClasifications;
import java.util.*;
import java.util.stream.Stream;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.math.BigDecimal;
import java.util.stream.Collectors;
import cablecoreddmattribute.proxies.CalculationsDirection;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.Scriptable;

public class JA_MultiFormulaUsingRhino extends CustomJavaAction<java.lang.String>
{
	private final IMendixObject Design;

	public JA_MultiFormulaUsingRhino(
		IContext context,
		IMendixObject _design
	)
	{
		super(context);
		this.Design = _design;
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		// BEGIN USER CODE
        Context rhino = Context.enter();
        rhino.setOptimizationLevel(-1); // Use -1 for interpreted mode (safe)
        Scriptable JS = rhino.initStandardObjects();
        injectHelperFunctions(JS);   
        Map<String, Map<String, List<Map<String, String>>>> groupedResult = new LinkedHashMap<>();
        groupedResult.put("Forward", new LinkedHashMap<>());
        groupedResult.put("Backward", new LinkedHashMap<>());
        groupedResult.put("Forward and Backward", new LinkedHashMap<>());
        
        Map<String, List<IMendixObject>> scopedAttributes = new LinkedHashMap<>();
        scopedAttributes.put("cable", Core.retrieveByPath(getContext(), Design, "CableCoreDDMAttribute.CableHeaderAttributeValue_Design"));
        scopedAttributes.put("layer", Core.retrieveByPath(getContext(), Design, "CableCoreDDMAttribute.ProcessAttributeValue_Design"));
        scopedAttributes.put("resource", Core.retrieveByPath(getContext(), Design, "CableCoreDDMAttribute.ResourceAttributeValue_Design"));
        scopedAttributes.put("bom", Core.retrieveByPath(getContext(), Design, "CableCoreDDMAttribute.BOMAttributeValue_Design"));

        List<IMendixObject> processDefineList = Core.retrieveByPath(getContext(), Design, "CableCoreDDMBaseData.ProcessDesign_Design");
        List<IMendixObject> routeAllocateList = Core.retrieveByPath(getContext(), Design, "CableCoreDDMBaseData.RouteAllocate_Design");
        Map<IMendixIdentifier, String> pdIdToProcessName = new HashMap<>();
        for (IMendixObject pd : processDefineList) {
            IMendixIdentifier pdId = pd.getId();
            IMendixObject process = Core.retrieveId(getContext(), (IMendixIdentifier) pd.getValue(getContext(), "CableCoreDDMBaseData.ProcessDesign_Process"));
            pdIdToProcessName.put(pdId, process.getValue(getContext(), "Name").toString());
        }

        // ---- Forward Phase ----
        List<IMendixObject> sortedProcessAttrs = scopedAttributes.get("layer").stream()
            .sorted(Comparator.comparingInt(a -> Optional.ofNullable((Integer) a.getValue(getContext(), "CalculationOrder")).orElse(Integer.MAX_VALUE)))
            .collect(Collectors.toList());

        for (IMendixObject attr : sortedProcessAttrs) {
            String dir = getDirection(attr);
            if (dir.equals("Forward") || dir.equals("Forward and Backward")) {
                evaluateAndStore(attr, groupedResult.get(dir.equals("Forward") ? "Forward" : "Forward and Backward"), "Process", scopedAttributes, processDefineList, routeAllocateList, pdIdToProcessName,rhino, JS);

                IMendixIdentifier pdId = (IMendixIdentifier) attr.getValue(getContext(), "CableCoreDDMAttribute.ProcessAttributeValue_ProcessDesign");
                if (pdId != null) {
                    List<IMendixObject> bomAttrs = scopedAttributes.get("bom").stream()
                        .filter(bom -> isBomLinkedToProcess(bom, pdId))
                        .sorted(Comparator.comparingInt(a -> Optional.ofNullable((Integer) a.getValue(getContext(), "CalculationOrder")).orElse(Integer.MAX_VALUE)))
                        .collect(Collectors.toList());

                    for (IMendixObject bomAttr : bomAttrs) {
                        String bomDir = getDirection(bomAttr);
                        if (bomDir.equals("Forward") || bomDir.equals("Forward and Backward")) {
                            evaluateAndStore(bomAttr, groupedResult.get(bomDir.equals("Forward") ? "Forward" : "Forward and Backward"), "BOM", scopedAttributes, processDefineList, routeAllocateList, pdIdToProcessName,rhino, JS);
                        }
                    }
                }
            }
        }

        List<String> restScopes = Arrays.asList("cable", "resource");
        for (String scope : restScopes) {
            for (IMendixObject attr : scopedAttributes.get(scope)) {
                String dir = getDirection(attr);
                if (dir.equals("Forward") || dir.equals("Forward and Backward")) {
                    evaluateAndStore(attr, groupedResult.get(dir.equals("Forward") ? "Forward" : "Forward and Backward"), capitalize(scope), scopedAttributes, processDefineList, routeAllocateList, pdIdToProcessName,rhino, JS);
                }
            }
        }

        // ---- Backward Phase ----
        List<IMendixObject> allAttrs = Stream.of("resource", "bom", "layer", "cable")
            .flatMap(scope -> scopedAttributes.get(scope).stream())
            .sorted(Comparator.comparingInt((IMendixObject attr) -> Optional.ofNullable((Integer) attr.getValue(getContext(), "CalculationOrder")).orElse(Integer.MAX_VALUE)).reversed())
            .collect(Collectors.toList());

        for (IMendixObject attr : allAttrs) {
            String dir = getDirection(attr);
            if (dir.equals("Backward") || dir.equals("Forward and Backward")) {
                evaluateAndStore(attr, groupedResult.get(dir.equals("Backward") ? "Backward" : "Forward and Backward"), resolveGroup(attr), scopedAttributes, processDefineList, routeAllocateList, pdIdToProcessName,rhino, JS);
            }
        }

        return new ObjectMapper().writeValueAsString(groupedResult);
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "JA_MultiFormulaUsingRhino";
	}

	// BEGIN EXTRA CODE
		
	  private void injectHelperFunctions(Scriptable scope) {
	        scope.put("PI", scope, Math.PI);

	        scope.put("ROUND", scope, new org.mozilla.javascript.BaseFunction() {
	            public Object call(Context cx, Scriptable scope, Scriptable thisObj, Object[] args) {
	                double val = ((Number) args[0]).doubleValue();
	                int digits = ((Number) args[1]).intValue();
	                return Double.valueOf(String.format("%." + digits + "f", val));
	            }
	        });

	        scope.put("ROUNDUP", scope, new org.mozilla.javascript.BaseFunction() {
	            public Object call(Context cx, Scriptable scope, Scriptable thisObj, Object[] args) {
	                double val = ((Number) args[0]).doubleValue();
	                int digits = ((Number) args[1]).intValue();
	                double factor = Math.pow(10, digits);
	                return Math.ceil(val * factor) / factor;
	            }
	        });

	        scope.put("ROUNDDOWN", scope, new org.mozilla.javascript.BaseFunction() {
	            public Object call(Context cx, Scriptable scope, Scriptable thisObj, Object[] args) {
	                double val = ((Number) args[0]).doubleValue();
	                int digits = ((Number) args[1]).intValue();
	                double factor = Math.pow(10, digits);
	                return Math.floor(val * factor) / factor;
	            }
	        });

	        scope.put("MROUND", scope, new org.mozilla.javascript.BaseFunction() {
	            public Object call(Context cx, Scriptable scope, Scriptable thisObj, Object[] args) {
	                double val = ((Number) args[0]).doubleValue();
	                double multiple = ((Number) args[1]).doubleValue();
	                return Math.round(val / multiple) * multiple;
	            }
	        });

	        scope.put("FLOOR", scope, new org.mozilla.javascript.BaseFunction() {
	            public Object call(Context cx, Scriptable scope, Scriptable thisObj, Object[] args) {
	                double val = ((Number) args[0]).doubleValue();
	                double multiple = ((Number) args[1]).doubleValue();
	                return Math.floor(val / multiple) * multiple;
	            }
	        });

	        scope.put("CEILING", scope, new org.mozilla.javascript.BaseFunction() {
	            public Object call(Context cx, Scriptable scope, Scriptable thisObj, Object[] args) {
	                double val = ((Number) args[0]).doubleValue();
	                double multiple = ((Number) args[1]).doubleValue();
	                return Math.ceil(val / multiple) * multiple;
	            }
	        });

	        scope.put("INT", scope, new org.mozilla.javascript.BaseFunction() {
	            public Object call(Context cx, Scriptable scope, Scriptable thisObj, Object[] args) {
	                double val = ((Number) args[0]).doubleValue();
	                return (int) Math.floor(val);
	            }
	        });

	        scope.put("TRUNC", scope, new org.mozilla.javascript.BaseFunction() {
	            public Object call(Context cx, Scriptable scope, Scriptable thisObj, Object[] args) {
	                double val = ((Number) args[0]).doubleValue();
	                int digits = ((Number) args[1]).intValue();
	                double factor = Math.pow(10, digits);
	                return (val < 0) ? Math.ceil(val * factor) / factor : Math.floor(val * factor) / factor;
	            }
	        });
	    }
	    private boolean isBomLinkedToProcess(IMendixObject bomAttr, IMendixIdentifier pdId) {
	        try {
	            Object link = bomAttr.getValue(getContext(), "CableCoreDDMAttribute.BOMAttributeValue_BOMDesign");
	            if (link == null) return false;
	            IMendixObject bomDesign = Core.retrieveId(getContext(), (IMendixIdentifier) link);
	            return pdId.equals(bomDesign.getValue(getContext(), "CableCoreDDMBaseData.BOMDesign_ProcessDesign"));
	        } catch (Exception e) {
	            return false;
	        }
	    }

	    private String getDirection(IMendixObject attr) {
	        Object enumVal = attr.getValue(getContext(), "CalcDirection");
	        if (enumVal == null) return "";
	        return CalculationsDirection.valueOf(enumVal.toString()).getCaption();
	    }
	    
	    private String resolveGroup(IMendixObject attr) {
	        String entity = attr.getType();
	        if (entity.contains("CableHeader")) return "Cable";
	        if (entity.contains("ProcessAttribute")) return "Process";
	        if (entity.contains("ResourceAttribute")) return "Resource";
	        if (entity.contains("BOMAttribute")) return "BOM";
	        return "Unknown";
	    }

	    private String capitalize(String s) {
	        return s.substring(0, 1).toUpperCase() + s.substring(1);
	    }

	    private void evaluateAndStore(IMendixObject attr,
	            Map < String, List < Map < String, String >>> resultMap,
	            String groupKey,
	            Map < String, List < IMendixObject >> scopedAttributes,
	            List < IMendixObject > processDefineList,
	            List < IMendixObject > routeAllocateList,
	            Map < IMendixIdentifier, String > pdIdToProcessName,
	            Context rhino, Scriptable JS
	    		) throws Exception {
	            Map < String, String > result = new HashMap < > ();

	            Object formulaRaw = attr.getValue(getContext(), "Formula");
	            if (formulaRaw == null || formulaRaw.toString().trim().isEmpty()) {
	                return;
	            }

	            String originalFormula = formulaRaw.toString();
	            String resolvedFormula = resolveFormula(originalFormula, attr, scopedAttributes, processDefineList, routeAllocateList, pdIdToProcessName);
	            String evaluatedValue = evaluateFormula(resolvedFormula,rhino, JS);

	            storeEvaluatedValue(getContext(), attr, evaluatedValue);

	            result.put("attributeName", attr.getValue(getContext(), "Name").toString());
	            result.put("calculationOrder", Optional.ofNullable(attr.getValue(getContext(), "CalculationOrder")).map(Object::toString).orElse(""));
	            result.put("originalFormula", originalFormula);
	            result.put("resolvedFormula", resolvedFormula);
	            result.put("evaluatedValue", evaluatedValue);

	            resultMap.computeIfAbsent(groupKey, k -> new ArrayList < > ()).add(result);
	        }
	    private String resolveFormula(
	    	    String formula,
	    	    IMendixObject attr,
	    	    Map<String, List<IMendixObject>> scopedAttributes,
	    	    List<IMendixObject> processDefineList,
	    	    List<IMendixObject> routeAllocateList,
	    	    Map<IMendixIdentifier, String> pdIdToProcessName
	    	) throws Exception {
	    	    String updatedFormula = formula;

	    	    for (String line : formula.split(";")) {
	    	        line = line.trim();
	    	        if (!line.contains("=")) continue;

	    	        String rhs = line.substring(line.indexOf('=') + 1).trim();
	    	        String[] parts = rhs.split("\\."); // Corrected regex for dot
	    	        if (parts.length < 2) continue;

	    	        String pattern = rhs;
	    	        Optional<IMendixObject> matched = Optional.empty();

	    	        switch (parts[0]) {
	    	            case "layer":
	    	                if (parts.length == 3 && "this".equalsIgnoreCase(parts[1]) && "processname".equalsIgnoreCase(parts[2])) {
	    	                    Object enumObj = attr.getValue(getContext(), "AttributeClasifications");
	    	                    if (enumObj == null) return "";
	    	                    String caption = AttributesClasifications.valueOf(enumObj.toString()).getCaption();

	    	                    if ("Process".equals(caption)) {
	    	                        IMendixIdentifier pdId = (IMendixIdentifier) attr.getValue(getContext(), "CableCoreDDMAttribute.ProcessAttributeValue_ProcessDesign");
	    	                        if (pdId != null) {
	    	                            IMendixObject procDesign = Core.retrieveId(getContext(), pdId);
	    	                            IMendixIdentifier procId = (IMendixIdentifier) procDesign.getValue(getContext(), "CableCoreDDMBaseData.ProcessDesign_Process");
	    	                            IMendixObject proc = Core.retrieveId(getContext(), procId);
	    	                            updatedFormula = updatedFormula.replace(pattern, "'" + proc.getValue(getContext(), "Name") + "'");
	    	                            continue;
	    	                        }
	    	                    } else if ("BOM".equals(caption)) {
	    	                        IMendixIdentifier bomId = (IMendixIdentifier) attr.getValue(getContext(), "CableCoreDDMAttribute.BOMAttributeValue_BOMDesign");
	    	                        if (bomId != null) {
	    	                            IMendixObject bomDesign = Core.retrieveId(getContext(), bomId);
	    	                            IMendixIdentifier pdId = (IMendixIdentifier) bomDesign.getValue(getContext(), "CableCoreDDMBaseData.BOMDesign_ProcessDesign");
	    	                            if (pdId != null) {
	    	                                IMendixObject procDesign = Core.retrieveId(getContext(), pdId);
	    	                                IMendixIdentifier procId = (IMendixIdentifier) procDesign.getValue(getContext(), "CableCoreDDMBaseData.ProcessDesign_Process");
	    	                                IMendixObject proc = Core.retrieveId(getContext(), procId);
	    	                                updatedFormula = updatedFormula.replace(pattern, "'" + proc.getValue(getContext(), "Name") + "'");
	    	                                continue;
	    	                            }
	    	                        }
	    	                    }
	    	                } else if (parts.length == 8 && "bom".equals(parts[2]) && "design".equals(parts[4]) && "layer".equals(parts[5])) {
	    	                    matched = matchLayerAttrFromBOMDesign(processDefineList, parts[1], parts[3], parts[7], parts[6]);
	    	                } else if (parts.length == 6 && "bom".equals(parts[2]) && "design".equals(parts[4])) {
	    	                    matched = matchCableHeaderAttrFromBOMDesign(processDefineList, parts[1], parts[3], parts[5]);
	    	                } else if (parts.length == 5 && "bom".equals(parts[2])) {
	    	                    matched = matchBOMAttributeFromProcess(processDefineList, parts[1], parts[3], parts[4]);
	    	                }else if (parts.length == 4 &&"all".equals(parts[1]) &&("sum".equals(parts[3]) || "min".equals(parts[3]) || "max".equals(parts[3]))) {
	    	                	    String aggResult = evaluateInlineAggregation(parts, scopedAttributes, attr, processDefineList);
	    	                	    if (aggResult != null) {
	    	                	        updatedFormula = updatedFormula.replace(pattern, aggResult);
	    	                	        continue; 
	    	                	    }
	    	                }else if(parts.length == 6 &&"this".equals(parts[1]) && "bom".equals(parts[2]) &&"all".equals(parts[3]) &&("sum".equals(parts[5]) || "min".equals(parts[5]) || "max".equals(parts[5]))) {
		                	    String aggResult = evaluateInlineAggregation(parts, scopedAttributes, attr, processDefineList);
		                	    if (aggResult != null) {
		                	        updatedFormula = updatedFormula.replace(pattern, aggResult);
		                	        continue; 
		                	    }
	    	                	
	    	                }
	    	                else if (parts.length == 3) {
	    	                    matched = matchLayerAttribute(parts[1], parts[2], scopedAttributes.get("layer"), pdIdToProcessName);
	    	                }
	    	                break;
	    	            case "cable":
	    	            	if (parts.length == 4 && "all".equals(parts[1]) &&("sum".equals(parts[3]) || "min".equals(parts[3]) || "max".equals(parts[3]))) {
	    	            		String aggResult = evaluateInlineAggregation(parts, scopedAttributes, attr, processDefineList);
	    	            		if (aggResult != null) {
	    	            			updatedFormula = updatedFormula.replace(pattern, aggResult);
	    	            			continue;
	    	            			}
	    	            	} 
	    	            	
	    	            	else  if(parts.length == 5 && "bom".equals(parts[1]) &&"all".equals(parts[2]) &&("sum".equals(parts[4]) || "min".equals(parts[4]) || "max".equals(parts[4])) ) {
	    	            		String aggResult = evaluateInlineAggregation(parts, scopedAttributes, attr, processDefineList);
	    	            		if (aggResult != null) {
	    	            			updatedFormula = updatedFormula.replace(pattern, aggResult);
	    	            			continue;
	    	            			}
	    	            		
	    	            	}         	
	    	            	else if (parts.length == 2) {
	                            	if ("productClassifications".equals(parts[1])) {
	                            	    Object prodClassObj = Design.getValue(getContext(), "CableCoreDDMBaseData.Design_ProductClassification");
	                            	    if (prodClassObj != null) {
	                            	        IMendixIdentifier pcId = (IMendixIdentifier) prodClassObj;
	                            	        IMendixObject prodClass = Core.retrieveId(getContext(), pcId);
	                            	        String pcName = prodClass.getValue(getContext(), "Name").toString();
	                            	        updatedFormula = updatedFormula.replace(pattern.trim(), "'" + pcName + "'");
	                            	        continue;
	                            	    }
	                            	}else {
	                            		matched = matchCableHeaderAttribute(parts[1], scopedAttributes.get("cable"));
	                            	}
	                            }
	    	            break;
	    	            
	    	            case "resource":
	    	            	if (parts.length == 4 && "all".equals(parts[1]) &&("sum".equals(parts[3]) || "min".equals(parts[3]) || "max".equals(parts[3]))) {
	    	            		String aggResult = evaluateInlineAggregation(parts, scopedAttributes, attr, processDefineList);
	    	            		if (aggResult != null) {
	    	            			updatedFormula = updatedFormula.replace(pattern, aggResult);
	    	            			continue;
	    	            			}
	    	            	}	
	    	            	else if (parts.length == 4) {
	    	            		matched = matchResourceAttribute(routeAllocateList, parts[1], parts[2], parts[3]);
	    	            		}
	    	            	break;    	          
	    	            	}
	    	        if (matched.isPresent()) {
	    	            String value = resolveAttributeValue(getContext(), parts[0], matched.get());
	    	            updatedFormula = updatedFormula.replace(pattern, value);
	    	        }
	    	    }

	    	    return updatedFormula;
	    	}
	    private String evaluateInlineAggregation(String[] parts,
	    	      Map < String, List < IMendixObject >> scopedAttributes,
	    	      IMendixObject attr,
	    	      List < IMendixObject > processDefineList) {

	    	      String scope = parts[0];
	    	      String aggType = parts[parts.length - 1];
	    	      String attrName = parts[parts.length - 2];

	    	      if (!(aggType.equals("sum") || aggType.equals("min") || aggType.equals("max"))) return null;

	    	      List < IMendixObject > targets = new ArrayList < > ();

	    	      try {
	    	        switch (scope) {
	    	        case "layer":
	    	          if (parts.length == 4 && "all".equals(parts[1])) {
	    	            targets = scopedAttributes.get("layer");
	    	          } else if (parts.length == 6 && "this".equals(parts[1]) && "bom".equals(parts[2]) && "all".equals(parts[3])) {
	    	            IMendixIdentifier pdId = (IMendixIdentifier) attr.getValue(getContext(), "CableCoreDDMAttribute.ProcessAttributeValue_ProcessDesign");
	    	            for (IMendixObject bom: scopedAttributes.get("bom")) {
	    	              IMendixObject bomDesign = Core.retrieveId(getContext(), (IMendixIdentifier) bom.getValue(getContext(), "CableCoreDDMAttribute.BOMAttributeValue_BOMDesign"));
	    	              if (pdId.equals(bomDesign.getValue(getContext(), "CableCoreDDMBaseData.BOMDesign_ProcessDesign"))) {
	    	                targets.add(bom);
	    	              }
	    	            }
	    	          }
	    	          break;
	    	        case "cable":
	    	          if (parts.length == 5 && "bom".equals(parts[1]) && "all".equals(parts[2])) {
	    	            targets = scopedAttributes.get("bom");
	    	          }
	    	          break;
	    	        case "resource":
	    	          if (parts.length == 4 && "all".equals(parts[1])) {
	    	            targets = scopedAttributes.get("resource");
	    	          }
	    	          break;
	    	        }

	    	        List < BigDecimal > values = new ArrayList < > ();
	    	        for (IMendixObject obj: targets) {
	    	          String name = obj.getValue(getContext(), "Name").toString();
	    	          if (!name.equals(attrName)) continue;
	    	          String valStr = resolveAttributeValue(getContext(), scope.equals("layer") && parts.length > 3 ? "bom" : scope, obj).replace("'", "").trim();
	    	          if (valStr != null && !valStr.isEmpty()) {
	    	        	    try {
	    	        	        BigDecimal bd = new BigDecimal(valStr);
	    	        	        values.add(bd);
	    	        	    } catch (NumberFormatException ex) {
	    	        	        Core.getLogger("JA_ExecuteFormula").warn("[Aggregation] Invalid number format: " + valStr);
	    	        	    }
	    	        	}

	    	        }

	    	        if (values.isEmpty()) return "0";

	    	        switch (aggType) {
	    	        case "sum":
	    	          return values.stream().reduce(BigDecimal.ZERO, BigDecimal::add).toString();
	    	        case "min":
	    	          return values.stream().min(BigDecimal::compareTo).get().toString();
	    	        case "max":
	    	          return values.stream().max(BigDecimal::compareTo).get().toString();
	    	        }

	    	      } catch (Exception e) {
	    	        Core.getLogger("JA_ExecuteFormula").warn("[InlineAgg] Error: " + e.getMessage());
	    	      }

	    	      return "0";
	    	    }
	    private String evaluateFormula(String updatedFormula,Context rhinoContext, Scriptable JS) {
	        try {
	            String sanitizedFormula = updatedFormula.replaceAll("\\blet\\b", "var").trim();
	            if (!sanitizedFormula.contains("return")) {
	                sanitizedFormula += "return result;";
	            }
	            String wrapped = "function _evaluate() { " + sanitizedFormula + " }; _evaluate();";
	            Object result = rhinoContext.evaluateString(JS, wrapped, "formula", 1, null);
	            String resultStr = Context.toString(result);
	            return resultStr;
	        } catch (Exception e) {
	            Core.getLogger("JA_ExecuteFormula").error("Rhino evaluation failed: " + e.getMessage(), e);
	            return "ERROR: " + e.getMessage();
	        }
	    }
	    
	    private void storeEvaluatedValue(IContext ctx,IMendixObject attr, String evaluatedResult) throws Exception {
		    Object enumStrAttributeTypeObj = attr.getValue(ctx, "AttributeType");
	        if (enumStrAttributeTypeObj == null) {
	            Core.getLogger("JA_ExecuteFormula").warn("[resolveAttributeValue] AttributeType is null");
	        }
	        String enumStrAttributeType= enumStrAttributeTypeObj.toString();
	        Core.getLogger("JA_ExecuteFormula").info("[resolveAttributeValue] AttributeType enum: " + enumStrAttributeType);
	        AttributeType enumAttributeTypeObj = AttributeType.valueOf(enumStrAttributeType);
	        String AttributeType = enumAttributeTypeObj.getCaption();
	        Core.getLogger("JA_ExecuteFormula").info("[resolveAttributeValue] Caption: " + AttributeType);
		    switch (AttributeType) {
		        case "String":
		        	attr.setValue(getContext(), "StringValue", evaluatedResult);
		            break;

		        case "Integer":
		        	attr.setValue(getContext(), "IntegerValue", Integer.parseInt(evaluatedResult));
		            break;

		        case "Decimal":
		        	attr.setValue(getContext(), "DecimalValue", new java.math.BigDecimal(evaluatedResult));
		            break;

		        case "Long":
		        	 attr.setValue(getContext(), "LongValue", Long.parseLong(evaluatedResult));
		            break;
		        case "TextArea":
		        	attr.setValue(getContext(), "StringValue", evaluatedResult);
		        default:
		            Core.getLogger("JA_ExecuteFormula").warn("[resolveAttributeValue] Unsupported AttributeType: " + AttributeType);
		            break;
		    }
		    Core.commit(getContext(), attr);
	    }
	    private String resolveAttributeValue(IContext ctx, String scope, IMendixObject attr) throws Exception {
		    Core.getLogger("JA_ExecuteFormula").info("[resolveAttributeValue] Start resolving for Attr ID: " + attr.getId().toLong());

		    // Get type string
		    boolean IsLockValue = attr.getValue(getContext(), "IsLockValue");
		    
		    Object enumStrAttributeTypeObj = attr.getValue(ctx, "AttributeType");
	        if (enumStrAttributeTypeObj == null) {
	            Core.getLogger("JA_ExecuteFormula").warn("[resolveAttributeValue] AttributeType is null");
	            return "";
	        }
	        String enumStrAttributeType= enumStrAttributeTypeObj.toString();
	        Core.getLogger("JA_ExecuteFormula").info("[resolveAttributeValue] AttributeType enum: " + enumStrAttributeType);
	        AttributeType enumAttributeTypeObj = AttributeType.valueOf(enumStrAttributeType);
	        String AttributeType = enumAttributeTypeObj.getCaption();
	        Core.getLogger("JA_ExecuteFormula").info("[resolveAttributeValue] Caption: " + AttributeType);
		    String value = "";
		    if (IsLockValue==true) {
		    	value = attr.getValue(getContext(), "LockValue").toString();
		    }else {
			    switch (AttributeType) {
		        case "String":
		            Object stringVal = attr.getValue(ctx, "StringValue");
		            value = stringVal != null ? stringVal.toString() : "";
		            Core.getLogger("JA_ExecuteFormula").info("[resolveAttributeValue] StringValue = " + value);
		            break;

		        case "Integer":
		            Object intVal = attr.getValue(ctx, "IntegerValue");
		            value = intVal != null ? intVal.toString() : "";
		            Core.getLogger("JA_ExecuteFormula").info("[resolveAttributeValue] IntegerValue = " + value);
		            break;

		        case "Decimal":
		            Object decVal = attr.getValue(ctx, "DecimalValue");
		            value = decVal != null ? decVal.toString() : "";
		            Core.getLogger("JA_ExecuteFormula").info("[resolveAttributeValue] DecimalValue = " + value);
		            break;

		        case "Long":
		            Object longVal = attr.getValue(ctx, "LongValue");
		            value = longVal != null ? longVal.toString() : "";
		            Core.getLogger("JA_ExecuteFormula").info("[resolveAttributeValue] LongValue = " + value);
		            break;

		        case "DropDown":
		            // Only now fetch AttributeClasifications
		            Object enumStrAttributeClasificationsObj = attr.getValue(ctx, "AttributeClasifications");
		            if (enumStrAttributeClasificationsObj == null) {
		                Core.getLogger("JA_ExecuteFormula").warn("[resolveAttributeValue] AttributeClasifications is null");
		                return "";
		            }
		            String enumStrAttributeClasifications = enumStrAttributeClasificationsObj.toString();
		            Core.getLogger("JA_ExecuteFormula").info("[resolveAttributeValue] AttributeClasifications enum: " + enumStrAttributeClasifications);
		            AttributesClasifications enumAttributeClasificationsObj = AttributesClasifications.valueOf(enumStrAttributeClasifications);
		            String AttributeClasifications = enumAttributeClasificationsObj.getCaption();
		            Core.getLogger("JA_ExecuteFormula").info("[resolveAttributeValue] Caption: " + AttributeClasifications);

		            IMendixIdentifier dropdownRef = null;
		            Core.getLogger("JA_ExecuteFormula").info("[resolveAttributeValue] Resolving DropDown for: " + AttributeClasifications);
		            switch (AttributeClasifications) {
		                case "CableHeader":
		                    dropdownRef = (IMendixIdentifier) attr.getValue(ctx, "CableCoreDDMAttribute.CableHeaderAttributeValue_CableHeaderDropDown");
		                    break;
		                case "Process":
		                    dropdownRef = (IMendixIdentifier) attr.getValue(ctx, "CableCoreDDMAttribute.ProcessAttributeValue_ProcessDropDown");
		                    break;
		                case "Resource":
		                    dropdownRef = (IMendixIdentifier) attr.getValue(ctx, "CableCoreDDMAttribute.ResourceAttributeValue_ResourceAttributesDropDown");
		                    break;
		                case "BOM":
		                    dropdownRef = (IMendixIdentifier) attr.getValue(ctx, "CableCoreDDMAttribute.BOMAttributeValue_BOMDropDown");
		                    break;
		                default:
		                    Core.getLogger("JA_ExecuteFormula").warn("[resolveAttributeValue] Unsupported classification caption: " + AttributeClasifications);
		                    break;
		            }

		            if (dropdownRef != null) {
		                Core.getLogger("JA_ExecuteFormula").info("[resolveAttributeValue] DropDownRef ID: " + dropdownRef.toLong());
		                IMendixObject dropdown = Core.retrieveId(ctx, dropdownRef);
		                if (dropdown != null) {
		                    Object dropdownValue = dropdown.getValue(ctx, "Value");
		                    if (dropdownValue != null) {
		                        value = dropdownValue.toString();
		                        Core.getLogger("JA_ExecuteFormula").info("[resolveAttributeValue] DropDown Value = " + value);
		                    } else {
		                        Core.getLogger("JA_ExecuteFormula").warn("[resolveAttributeValue] DropDown Value is null");
		                    }
		                } else {
		                    Core.getLogger("JA_ExecuteFormula").warn("[resolveAttributeValue] DropDown object is null");
		                }
		            } else {
		                Core.getLogger("JA_ExecuteFormula").warn("[resolveAttributeValue] DropDownRef is null");
		            }
		            break;

		        default:
		            Core.getLogger("JA_ExecuteFormula").warn("[resolveAttributeValue] Unsupported AttributeType: " + AttributeType);
		            break;
		    }
		    }



		    Core.getLogger("JA_ExecuteFormula").info("[resolveAttributeValue] Final Resolved Value = " + value);
		    return (AttributeType.equals("String") || AttributeType.equals("DropDown")) ? "'" + value + "'" : value;
		}
	    
	    private Optional<IMendixObject> matchCableHeaderAttribute(String attrName, List<IMendixObject> attrList) {
			return attrList.stream().filter(attr -> {
				try {
					String name = attr.getValue(getContext(), "Name").toString();
					return name.equals(attrName);
				} catch (Exception e) {
					return false;
				}
			}).findFirst();
		}

		private Optional<IMendixObject> matchLayerAttribute(String procName, String attrName, List<IMendixObject> processAttrList, Map<IMendixIdentifier, String> procMap) {
		    return processAttrList.stream().filter(attr -> {
		        try {
		            Core.getLogger("JA_ExecuteFormula").info("[matchLayerAttribute] Checking attribute: " + attr.getId().toLong());

		            // Retrieve and log the attribute name
		            Object nameObj = attr.getValue(getContext(), "Name");
		            if (nameObj == null) {
		                Core.getLogger("JA_ExecuteFormula").warn("[matchLayerAttribute] Attribute Name is null for: " + attr.getId().toLong());
		                return false;
		            }
		            String name = nameObj.toString();
		            Core.getLogger("JA_ExecuteFormula").info("[matchLayerAttribute] Attribute Name = " + name + ", Expected = " + attrName);

		            if (!name.equalsIgnoreCase(attrName)) return false;

		            // Get the ProcessDesign reference
		            Object pdIdObj = attr.getValue(getContext(), "CableCoreDDMAttribute.ProcessAttributeValue_ProcessDesign");
		            if (pdIdObj == null) {
		                Core.getLogger("JA_ExecuteFormula").warn("[matchLayerAttribute] ProcessDesign reference is null for: " + attr.getId().toLong());
		                return false;
		            }
		            IMendixIdentifier pdId = (IMendixIdentifier) pdIdObj;
		            Core.getLogger("JA_ExecuteFormula").info("[matchLayerAttribute] ProcessDesign ID: " + pdId.toLong());

		            // Lookup process name from the map
		            String mapProcessName = procMap.get(pdId);
		            Core.getLogger("JA_ExecuteFormula").info("[matchLayerAttribute] Mapped process name: " + mapProcessName + ", Expected: " + procName);

		            if (mapProcessName == null) return false;

		            return mapProcessName.equalsIgnoreCase(procName);
		        } catch (Exception e) {
		            Core.getLogger("JA_ExecuteFormula").error("[matchLayerAttribute] Exception: " + e.getMessage(), e);
		            return false;
		        }
		    }).findFirst();
		}


	    private Optional<IMendixObject> matchBOMAttributeFromProcess(List<IMendixObject> processList, String processName, String bomId, String attributeName) {
	        return processList.stream().filter(pd -> {
	            try {
	                IMendixIdentifier procId = (IMendixIdentifier) pd.getValue(getContext(), "CableCoreDDMBaseData.ProcessDesign_Process");
	                IMendixObject proc = Core.retrieveId(getContext(), procId);
	                String currentProcName = proc.getValue(getContext(), "Name").toString();
	                Core.getLogger("JA_ExecuteFormula").info("Checking process: " + currentProcName);
	                return currentProcName.equals(processName);
	            } catch (Exception e) {
	                return false;
	            }
	        }).flatMap(pd -> {
	            try {
	                List<IMendixObject> bomList = Core.retrieveByPath(getContext(), pd, "CableCoreDDMBaseData.BOMDesign_ProcessDesign");
	                return bomList.stream();
	            } catch (Exception e) {
	                return Stream.empty();
	            }
	        }).filter(bom -> {
	            try {
	                String currentBomId = bom.hasMember("BOMID") ? bom.getValue(getContext(), "BOMID").toString() : "";
	                Core.getLogger("JA_ExecuteFormula").info("[matchBOMAttributeFromProcess] Comparing BOM_ID actual=" + currentBomId + " expected=" + bomId);
	                return currentBomId.equals(bomId);
	            } catch (Exception e) {
	                return false;
	            }
	        }).flatMap(bom -> {
	            try {
	                List<IMendixObject> linkedAttrs = Core.retrieveByPath(getContext(), bom, "CableCoreDDMAttribute.BOMAttributeValue_BOMDesign");
	                return linkedAttrs.stream().filter(attr -> {
	                    try {
	                        return attr.getValue(getContext(), "Name").toString().equals(attributeName);
	                    } catch (Exception e) {
	                        return false;
	                    }
	                });
	            } catch (Exception e) {
	                return Stream.empty();
	            }
	        }).findFirst();
	    }
	    
		private Optional<IMendixObject> matchCableHeaderAttrFromBOMDesign(List<IMendixObject> processList, String procName, String bomId, String attrName) {
			return processList.stream().filter(pd -> {
				try {
					IMendixIdentifier procId = (IMendixIdentifier) pd.getValue(getContext(), "CableCoreDDMBaseData.ProcessDesign_Process");
					IMendixObject proc = Core.retrieveId(getContext(), procId);
					return proc.getValue(getContext(), "Name").toString().equals(procName);
				} catch (Exception e) {
					return false;
				}
			}).flatMap(pd -> {
				try {
					List<IMendixObject> bomList = Core.retrieveByPath(getContext(), pd, "CableCoreDDMBaseData.BOMDesign_ProcessDesign");
					return bomList.stream();
				} catch (Exception e) {
					return Stream.empty();
				}
			}).filter(bom -> {
				try {
					return bom.getValue(getContext(), "BOMID").toString().equals(bomId);
				} catch (Exception e) {
					return false;
				}
			}).flatMap(bom -> {
				try {
					List<IMendixObject> designs = Core.retrieveByPath(getContext(), bom, "CableCoreDDMBaseData.BOMDesign_DesignItem");
					return designs.stream();
				} catch (Exception e) {
					return Stream.empty();
				}
			}).flatMap(design -> {
				try {
					List<IMendixObject> designAttrs = Core.retrieveByPath(getContext(), design, "CableCoreDDMAttribute.CableHeaderAttributeValue_Design");
					return designAttrs.stream().filter(attr -> {
						try {
							String name = attr.getValue(getContext(), "Name").toString();
							return name.equals(attrName);
						} catch (Exception e) {
							return false;
						}
					});
				} catch (Exception e) {
					return Stream.empty();
				}
			}).findFirst();
		}

		private Optional<IMendixObject> matchLayerAttrFromBOMDesign(List<IMendixObject> processList, String procName, String bomId, String attrName, String subProcName) {
			return processList.stream().filter(pd -> {
				try {
					IMendixIdentifier procId = (IMendixIdentifier) pd.getValue(getContext(), "CableCoreDDMBaseData.ProcessDesign_Process");
					IMendixObject proc = Core.retrieveId(getContext(), procId);
					return proc.getValue(getContext(), "Name").toString().equals(procName);
				} catch (Exception e) {
					return false;
				}
			}).flatMap(pd -> {
				try {
					List<IMendixObject> bomList = Core.retrieveByPath(getContext(), pd, "CableCoreDDMBaseData.BOMDesign_ProcessDesign");
					return bomList.stream();
				} catch (Exception e) {
					return Stream.empty();
				}
			}).filter(bom -> {
				try {
					return bom.getValue(getContext(), "BOMID").toString().equals(bomId);
				} catch (Exception e) {
					return false;
				}
			}).flatMap(bom -> {
				try {
					List<IMendixObject> designs = Core.retrieveByPath(getContext(), bom, "CableCoreDDMBaseData.BOMDesign_DesignItem");
					return designs.stream();
				} catch (Exception e) {
					return Stream.empty();
				}
			}).flatMap(design -> {
				try {
					List<IMendixObject> layerProcesses = Core.retrieveByPath(getContext(), design, "CableCoreDDMBaseData.ProcessDesign_Design");
					return layerProcesses.stream();
				} catch (Exception e) {
					return Stream.empty();
				}
			}).filter(pd -> {
				try {
					IMendixIdentifier procId = (IMendixIdentifier) pd.getValue(getContext(), "CableCoreDDMBaseData.ProcessDesign_Process");
					IMendixObject proc = Core.retrieveId(getContext(), procId);
					String subProcFound = proc.getValue(getContext(), "Name").toString();
					Core.getLogger("JA_ExecuteFormula").info("Searching for sub-process: found=" + subProcFound + ", expected=" + subProcName);
					return subProcFound.equals(subProcName);
				} catch (Exception e) {
					return false;
				}
			}).flatMap(subProc -> {
				try {
					List<IMendixObject> attrList = Core.retrieveByPath(getContext(), subProc, "CableCoreDDMAttribute.ProcessAttributeValue_ProcessDesign");
					return attrList.stream().filter(attr -> {
						try {
							String attrFound = attr.getValue(getContext(), "Name").toString();
							return attrFound.equals(attrName);
						} catch (Exception e) {
							return false;
						}
					});
				} catch (Exception e) {
					return Stream.empty();
				}
			}).findFirst();
		}

		private Map<IMendixIdentifier, String> cacheProcessNames(List<IMendixObject> processDefineList) throws Exception {
			Map<IMendixIdentifier, String> map = new HashMap<>();

			for (IMendixObject pd: processDefineList) {
				try {
					IMendixIdentifier pdId = pd.getId();
					IMendixIdentifier procId = (IMendixIdentifier) pd.getValue(getContext(), "CableCoreDDMBaseData.ProcessDesign_Process");
					IMendixObject proc = Core.retrieveId(getContext(), procId);
					map.put(pdId, proc.getValue(getContext(), "Name").toString());
				} catch (Exception ignored) {}
			}

			return map;
		}
		private Optional<IMendixObject> matchResourceAttribute(List<IMendixObject> routeAllocList, String operationId, String resourceId, String attrName) {
			return routeAllocList.stream()
				.filter(ra -> {
					Object opVal = ra.getValue(getContext(), "OperationID");
					if (opVal == null) {
						Core.getLogger("JA_ExecuteFormula").warn("[ResourceMatch] OperationID is null");
						return false;
					}
					String opId = opVal.toString();
					Core.getLogger("JA_ExecuteFormula").info("[ResourceMatch] OperationID = " + opId);
					return operationId.equals(opId);
				})
				.flatMap(ra -> {
					try {
						List<IMendixObject> resources = Core.retrieveByPath(getContext(), ra, "CableCoreDDMBaseData.ResourceDesign_RouteAllocate");
						return resources.stream();
					} catch (Exception e) {
						return Stream.empty();
					}
				})
				.filter(res -> {
					Object resVal = res.getValue(getContext(), "ResourceID");
					if (resVal == null) {
						Core.getLogger("JA_ExecuteFormula").warn("[ResourceMatch] ResourceID is null");
						return false;
					}
					String id = resVal.toString();
					Core.getLogger("JA_ExecuteFormula").info("[ResourceMatch] ResourceID = " + id);
					return resourceId.equals(id);
				})
				.flatMap(res -> {
					try {
						List<IMendixObject> attrList = Core.retrieveByPath(getContext(), res, "CableCoreDDMAttribute.ResourceAttributeValue_ResourceDesign");
						return attrList.stream();
					} catch (Exception e) {
						return Stream.empty();
					}
				})
				.filter(attr -> {
					Object attrVal = attr.getValue(getContext(), "Name");
					if (attrVal == null) {
						Core.getLogger("JA_ExecuteFormula").warn("[ResourceMatch] Attribute Name is null");
						return false;
					}
					String attrNameInObj = attrVal.toString();
					Core.getLogger("JA_ExecuteFormula").info("[ResourceMatch] Attribute Name = " + attrNameInObj);
					return attrName.equals(attrNameInObj);
				})
				.findFirst();
		}
	    
	// END EXTRA CODE
}
